"""High level faÃ§ade around the ZKML helper functions."""
from __future__ import annotations

from typing import Any, Tuple

import torch

from .zk_inference import build_statement, build_witness, zk_infer
from .zk_proofs import verify_proof


class ZKML:
    """Convenience wrapper that mirrors the legacy ZKML class interface."""

    def zk_inference(self, model: torch.nn.Module | Any, x: torch.Tensor) -> Tuple[torch.Tensor, str]:
        """Run :func:`zk_infer` and return the prediction and proof.

        Parameters
        ----------
        model:
            Callable PyTorch module or compatible object representing the
            inference model.
        x:
            Input tensor forwarded through the model.
        """
        return zk_infer(model, x)

    def verify_inference(self, model: torch.nn.Module | Any, x: torch.Tensor, prediction: torch.Tensor, proof: str) -> bool:
        """Verify a proof against a model, input tensor and prediction.

        Parameters
        ----------
        model:
            Model that produced the prediction.
        x:
            Input tensor used during inference.
        prediction:
            Output tensor returned by the model.
        proof:
            Proof string generated by :func:`zk_infer` or :meth:`zk_inference`.

        Returns
        -------
        bool
            ``True`` if the supplied proof matches the recomputed statement
            hash, ``False`` otherwise.
        """
        witness = build_witness(model, x)
        statement = build_statement(prediction, witness)
        return verify_proof(statement, proof)


__all__ = ["ZKML"]
